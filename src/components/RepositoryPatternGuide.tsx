// components/RepositoryPatternGuide.tsx
import Link from 'next/link';

export default function RepositoryPatternGuide() {
  return (
    <article className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      {/* Cabe√ßalho */}
      <header className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">
          Repository, service e patterns
        </h1>
        <div className="w-20 h-1 bg-blue-600 rounded"></div>
      </header>

      {/* Sum√°rio */}
      <section className="mb-8 p-6 bg-blue-50 rounded-lg">
        <h2 className="text-xl font-semibold text-blue-900 mb-3">Sum√°rio</h2>
        <p className="text-blue-800 leading-relaxed">
          Nesse documento vamos desmistificar a utiliza√ß√£o desses dois patterns dentro de aplica√ß√µes 
          back-end e comparar suas utiliza√ß√µes com outros padr√µes comuns como os controllers do MVC.
        </p>
      </section>

      {/* Repository Section */}
      <section className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Repository</h2>
        <div className="space-y-4 text-gray-700 leading-relaxed">
          <p>
            O Repository √© um conceito introduzido no Data Mapper Pattern ou Repository Pattern 
            que consiste em uma ponte entre nossa aplica√ß√£o e a fonte de dados, seja ela um banco 
            de dados, um arquivo f√≠sico ou qualquer outro meio de persist√™ncia de dados da aplica√ß√£o.
          </p>
          <p>
            Essa implementa√ß√£o visa isolar a forma com que nos comunicamos com os dados, abstraindo 
            l√≥gicas comuns de opera√ß√µes no banco.
          </p>
          <p>
            Geralmente o Repository possui os m√©todos comuns de comunica√ß√£o com uma fonte de dados 
            como listagem, busca, cria√ß√£o, edi√ß√£o, remo√ß√£o, mas conforme a aplica√ß√£o cresce o 
            desenvolvedor tende a encontrar outras opera√ß√µes repetit√≠veis e, com isso, popula o 
            reposit√≥rio com mais funcionalidades.
          </p>
        </div>

        {/* Exemplo Real */}
        <div className="mt-6 p-6 bg-green-50 border-l-4 border-green-500 rounded">
          <h3 className="text-lg font-semibold text-green-800 mb-3">üè® Exemplo real</h3>
          <p className="text-green-700 leading-relaxed">
            Imagine uma aplica√ß√£o que controla reserva de quartos em um hotel, uma pessoa pode 
            acessar o site, reservar um quarto e pagar pelo mesmo. Essa reserva depende do quarto 
            estar vago para esse intervalo de datas que o usu√°rio selecionar.
          </p>
          <p className="text-green-700 leading-relaxed mt-3">
            Se pensarmos nisso como uma consulta no banco, precisaremos realizar uma query um 
            pouco complexa onde comparamos a data de entrada e sa√≠da com outras reservas j√° 
            existentes na aplica√ß√£o, buscando a disponibilidade do quarto.
          </p>
          <p className="text-green-700 leading-relaxed mt-3">
            Em um cen√°rio real, essa busca por disponibilidade de um quarto pode ser feita em 
            v√°rias partes da aplica√ß√£o, a home page do site pode possuir uma busca pr√©via de 
            disponibilidade, a reserva precisa verificar a disponibilidade, o atendente do hotel 
            precisa conseguir verificar disponibilidade para reservas no balc√£o, ou seja, uma 
            mesma query no banco de dados sendo utilizada em m√∫ltiplos contextos, por isso 
            criamos isso em um Repository, reaproveitamento.
          </p>
        </div>
      </section>

      {/* Service Section */}
      <section className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Service</h2>
        <div className="space-y-4 text-gray-700 leading-relaxed">
          <p>
            O Service √© um conceito introduzido no Service Pattern. Ele tem como objetivo abstrair 
            regras de neg√≥cio das rotas, al√©m de tornar nosso c√≥digo mais reutiliz√°vel.
          </p>
          <p>
            No contexto da nossa jornada, essa implementa√ß√£o visa reduzir a complexidade das rotas 
            da nossa aplica√ß√£o e deix√°-las respons√°veis apenas pelo que realmente devem fazer: 
            receber uma requisi√ß√£o, repassar os dados da requisi√ß√£o a outro arquivo e devolver uma resposta.
          </p>
          <p>
            O Service deve ter um nome descritivo (ex.: updateDeliveryManProfileService) e <strong>sempre</strong> 
            possuir apenas <strong>um</strong> m√©todo (ex.: execute()). Al√©m disso, caso outra rota ou arquivo 
            precise executar essa mesma a√ß√£o, basta chamar e executar esse Service, obedecendo 
            assim a outro importante princ√≠pio: DRY (Don&apos;t Repeat Yourself).
          </p>
        </div>

        {/* Exemplo Real */}
        <div className="mt-6 p-6 bg-purple-50 border-l-4 border-purple-500 rounded">
          <h3 className="text-lg font-semibold text-purple-800 mb-3">üè® Exemplo real</h3>
          <p className="text-purple-700 leading-relaxed">
            Imagine a mesma aplica√ß√£o que controla a reserva de quartos em um hotel. Essa reserva 
            pode envolver diversas etapas, como verifica√ß√£o da disponibilidade, realiza√ß√£o do 
            pagamento, envio de emails, entre outros.
          </p>
          <p className="text-purple-700 leading-relaxed mt-3">
            Dessa forma, a simples a√ß√£o de reservar um quarto ir√° desencadear em diversas outras 
            a√ß√µes. Se pensarmos nisso como c√≥digo, teremos regras de neg√≥cio, que n√£o s√£o de 
            responsabilidade do Repository, diretamente na nossa rota. Isso fere alguns princ√≠pios 
            de programa√ß√£o como o Single Responsability Principle e, portanto, os Services s√£o 
            criados para serem os respons√°veis por realizar essas a√ß√µes.
          </p>
          <p className="text-purple-700 leading-relaxed mt-3">
            Al√©m disso, imagine que em outras a√ß√µes como consumir produtos do Hotel seja necess√°rio 
            executar algumas a√ß√µes novamente, como realizar o pagamento. Com o Service criado, 
            basta cham√°-lo e execut√°-lo novamente.
          </p>
        </div>
      </section>

      {/* Por que tudo isso? Section */}
      <section className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Por que tudo isso?</h2>
        <p className="text-gray-700 mb-6 leading-relaxed">
          Os Services e Repositories s√£o utilizados para construir uma base s√≥lida, visando a 
          escalabilidade e aplica√ß√£o de boas pr√°ticas. Com o seu uso, apesar de uma maior 
          complexidade no in√≠cio, √© poss√≠vel obter diversos benef√≠cios ao atender princ√≠pios 
          importantes da programa√ß√£o.
        </p>

        <div className="grid md:grid-cols-2 gap-4">
          {[
            {
              acronym: "SoC",
              name: "Separation of Concerns",
              description: "Esse princ√≠pio zela pela separa√ß√£o de responsabilidades de cada arquivo. Exemplo: as rotas n√£o devem ser respons√°veis por lidar com a persist√™ncia dos dados, isso fica por conta do Repository. J√° o Repository n√£o √© respons√°vel pela tratativa das regras de neg√≥cio, isso √© responsabilidade dos Services;"
            },
            {
              acronym: "DRY",
              name: "Don't Repeat Yourself",
              description: "Esse princ√≠pio zela pelo maior reaproveitamento de c√≥digo. Esse princ√≠pio n√£o preza necessariamente pela n√£o-repeti√ß√£o de c√≥digo e sim regras de neg√≥cio. Exemplo: ao criar Services e Repositories, voc√™ possibilita a reutiliza√ß√£o desses c√≥digos no restante da aplica√ß√£o;"
            },
            {
              acronym: "SRP",
              name: "Single Responsability Principle",
              description: "Esse princ√≠pio zela que uma classe deve possuir apenas uma responsabilidade. Exemplo: Ao criar um service chamado `createTransactionService`, devemos garantir que no seu √∫nico m√©todo (execute()) seu trabalho seja **apenas** a cria√ß√£o de uma transa√ß√£o;"
            },
            {
              acronym: "DIP",
              name: "Dependency Inversion Principle",
              description: "Esse princ√≠pio zela que uma entidade dependa apenas de abstra√ß√µes, n√£o de implementa√ß√µes. Exemplo: Ao atribuir ao Repository a comunica√ß√£o com o Banco de dados, o Service precisa interagir apenas com essa abstra√ß√£o, sem precisar criar uma nova inst√¢ncia e realizar as a√ß√µes diretamente;"
            }
          ].map((principle, index) => (
            <div key={index} className="p-4 bg-gray-50 rounded-lg border border-gray-200">
              <div className="flex items-center mb-2">
                <span className="bg-blue-600 text-white px-3 py-1 rounded-md text-sm font-bold mr-2">
                  {principle.acronym}
                </span>
                <h3 className="font-semibold text-gray-800">{principle.name}</h3>
              </div>
              <p className="text-gray-600 text-sm leading-relaxed">{principle.description}</p>
            </div>
          ))}
        </div>
      </section>

      {/* SOLID Section */}
      <section className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Onde entra o SOLID?</h2>
        <div className="space-y-4 text-gray-700 leading-relaxed">
          <p>
            O SOLID √© uma sigla que representa 5 princ√≠pios da programa√ß√£o orientada a objetos:
          </p>
          
          <ul className="list-disc list-inside space-y-2 ml-4">
            <li><strong>SRP (Single Responsability Principle);</strong></li>
            <li><strong>OCP (Open‚Äìclosed Principle);</strong></li>
            <li><strong>LSP (Liskov substitution Principle);</strong></li>
            <li><strong>ISP (Interface segregation Principle);</strong></li>
            <li><strong>DIP (Dependency Inversion Principle).</strong></li>
          </ul>
          
          <p>
            E ele entra justamente nessa abordagem que estamos utilizando (Repositories e Services). 
            Os princ√≠pios <strong>DIP</strong> e <strong>SRP</strong> provavelmente s√£o os mais 
            f√°ceis de enxergar nesse primeiro momento, mas ao longo do curso o <strong>SOLID</strong> 
            ser√° aplicado cada vez mais, conforme entendemos mais o funcionamento do Typescript e 
            nos acostumamos com o Data Mapper Pattern.
          </p>
        </div>

        <div className="mt-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded">
          <p className="text-yellow-800 text-sm">
            üí° <strong>Quer ler mais sobre SOLID?</strong> Confira{' '}
            <Link 
              href="https://www.notion.so/Princ-pios-do-SOLID-d469618bbd2049668eaf80e889194cce?pvs=21" 
              className="text-blue-600 hover:text-blue-800 underline font-medium"
              target="_blank"
              rel="noopener noreferrer"
            >
              esse outro documento
            </Link>{' '}
            com exemplos de c√≥digo.
          </p>
        </div>
      </section>

      {/* MVC Section */}
      <section className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">E os controllers? E o MVC?</h2>
        
        <div className="flex justify-center my-6">
          <div className="bg-gray-100 p-4 rounded-lg">
            <div className="text-4xl">üîç</div>
          </div>
        </div>

        <div className="space-y-4 text-gray-700 leading-relaxed">
          <p>
            Se voc√™ j√° trabalhou com MVC ou participou da antiga jornada, deve estar se perguntando: 
            cad√™ os controllers? Fique tranquilo, eles est√£o bem üòÅ
          </p>
          <p>
            At√© ent√£o, utiliz√°vamos o MVC Pattern (Model, View e Controller) onde os nossos 
            controllers basicamente eram respons√°veis por todas as regras de neg√≥cio (conex√£o com 
            banco de dados, tratativas de erros, formata√ß√£o dos dados).
          </p>
          <p>
            Atualmente, estamos utilizamos o Data Mapper Pattern e focando bastante nos princ√≠pios 
            do SOLID e DDD, onde separamos melhor as responsabilidades da aplica√ß√£o entre os 
            arquivos de rotas, services e repositories.
          </p>
          <p>
            Mas fique tranquilo, isso n√£o significa que o MVC Pattern morreu, e se voc√™ sente 
            tanta falta dos controllers, basta abstrair o c√≥digo presente nas nossas rotas para 
            arquivos controllers. Ah, inclusive faremos isso mais a frente.
          </p>
        </div>
      </section>
    </article>
  );
}